{% extends "base.njk" %}

{% block content %}
<script>document.body.className = "void";</script>

<article class="void">
  <header>
    <h1 class="mark-title">{{ title }}</h1>
    {% if subtitle %}<p class="subtitle">{{ subtitle }}</p>{% endif %}
  </header>

  {% if stave_image %}
  <figure class="stave">
    <img src="{{ stave_image }}" alt="Ritual stave for {{ title }}">
    <figcaption>Figure M-{{ mark_id }} — Transcribe to enter.</figcaption>
  </figure>
  {% endif %}

  <section id="seal" class="seal-box">
    <label class="forgive-invocation">the characters to forgive:</label>

    <div class="seal-inputs" aria-label="six-gordian-fields">
      <input class="pwseg" id="p1" maxlength="2" autocomplete="off" inputmode="numeric" pattern="[0-9]*" />
      <input class="pwseg" id="p2" maxlength="2" autocomplete="off" inputmode="numeric" pattern="[0-9]*" />
      <input class="pwseg" id="p3" maxlength="2" autocomplete="off" inputmode="numeric" pattern="[0-9]*" />
      <input class="pwseg" id="p4" maxlength="2" autocomplete="off" inputmode="numeric" pattern="[0-9]*" />
      <input class="pwseg" id="p5" maxlength="2" autocomplete="off" inputmode="numeric" pattern="[0-9]*" />
      <input class="pwseg" id="p6" maxlength="2" autocomplete="off" inputmode="numeric" pattern="[0-9]*" />
    </div>

    <button id="open" class="button button-dark">UNSEAL</button>
    <div id="fail" class="notice hidden">the seal rejects your transcription. listen again.</div>
  </section>

  <!-- Unlocked payload -->
  <section id="unlocked" class="hidden">
    {% if audio_stream_url %}
    <h2>stream</h2>
    <div class="embed">
      <iframe src="{{ audio_stream_url }}" width="100%" height="140" frameborder="0"></iframe>
    </div>
    {% endif %}

    {% if download_url %}
    <p><a class="button button-dark" href="{{ download_url }}">download · mark {{ mark_id }}</a></p>
    {% endif %}

    {% if aria_abstract or dne_abstract %}
    <section class="abstracts">
      <h3>abstracts</h3>
      {% if aria_abstract %}<p><em>ARIA (sense):</em> {{ aria_abstract }}</p>{% endif %}
      {% if dne_abstract %}<p><em>DNE (antisense):</em> {{ dne_abstract }}</p>{% endif %}
    </section>
    {% endif %}

    {% if hypertext_link or library_link or treatise_link %}
    <section class="crosslinks">
      <h3>crosslinks</h3>
      <ul>
        {% if hypertext_link %}<li>cgms hypertext — <a href="{{ hypertext_link }}">enter</a></li>{% endif %}
        {% if library_link %}<li>library — <a href="{{ library_link }}">catalogue</a></li>{% endif %}
        {% if treatise_link %}<li>lexicomythography papers — <a href="{{ treatise_link }}">read</a></li>{% endif %}
      </ul>
    </section>
    {% endif %}
  </section>

  <!-- Recursive corruption field -->
  <section id="recursion-field" class="recursion" data-mark-id="{{ mark_id }}" aria-hidden="true"></section>
  <div id="leak-stack"></div>
</article>

<script>
/* Plaintext two-digit Gordian password check (01–23 per slot) */
/* The page expects frontmatter: password: "07 12 03 18 09 22" (six pairs separated by spaces) */

(function(){
  const openBtn = document.getElementById('open');
  const fail = document.getElementById('fail');
  const seal = document.getElementById('seal');
  const unlocked = document.getElementById('unlocked');
  const segs = [...document.querySelectorAll('.pwseg')];

  // frontmatter password (string of six two-digit codes separated by spaces)
  const target = "{{ password | default('') }}";

  // normalize a segment: trim, remove non-digits, pad to two digits
  function normalizeSeg(s){
    const digits = (s||'').replace(/\D/g,'').trim();
    if(digits.length === 0) return '';
    if(digits.length === 1) return '0' + digits;
    return digits.slice(-2);
  }

  // validate each code 01..23
  function validSeg(code){
    if(!/^\d{2}$/.test(code)) return false;
    const n = parseInt(code, 10);
    return n >= 1 && n <= 23;
  }

  // collect value string in "07 12 03 18 09 22" style
  function collectInput(){
    const arr = segs.map(s => normalizeSeg(s.value));
    return arr.join(' ');
  }

  // UI helpers: show fail, leak event
  function showFail(){
    fail.classList.remove('hidden');
    document.dispatchEvent(new CustomEvent('forgive:fail'));
    // narrative leak: dispatch some text to the recursion engine
    document.dispatchEvent(new CustomEvent('narrative:leak', { detail: { text: "YOU ARE IN A SYSTEM OF AT LEAST SIX SEALS" } }));
    setTimeout(()=>fail.classList.add('hidden'), 2600);
  }

  // auto-advance behavior: move to next when two chars entered
  segs.forEach((el, idx) => {
    el.addEventListener('input', (e) => {
      // strip non-digits
      const cleaned = el.value.replace(/\D/g,'');
      el.value = cleaned;
      if(cleaned.length >= 2 && idx < segs.length - 1){
        segs[idx+1].focus();
      }
    });

    el.addEventListener('keydown', (ev) => {
      if(ev.key === 'Backspace' && el.value.length === 0 && idx > 0){
        segs[idx-1].focus();
      }
    });
  });

  openBtn?.addEventListener('click', () => {
    const input = collectInput();
    // validate all segments
    const arr = input.split(' ');
    if(arr.length !== 6 || arr.some(s => s === '' || !validSeg(s))){
      showFail();
      return;
    }

    // compare normalized user input to normalized target
    const normTarget = (target || '').split(/\s+/).map(s => s.padStart(2,'0')).join(' ');
    if(normTarget && input === normTarget){
      seal.classList.add('hidden');
      unlocked.classList.remove('hidden');
      document.body.classList.add('void-calm');
      // announce success to recursion engine
      document.dispatchEvent(new CustomEvent('forgive:success', { detail: { mark: "{{ mark_id }}" } }));
    } else {
      showFail();
    }
  });

})();
</script>
<script src="/assets/js/scrollLeaks.js"></script>
<script src="/assets/js/recursion.js" defer></script>
{% endblock %}